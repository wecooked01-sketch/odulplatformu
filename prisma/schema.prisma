// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts              Account[]
  sessions              Session[]
  pointTransactions     PointTransaction[]
  wheelSpins            WheelSpin[]
  lotteryTickets        LotteryTicket[]
  contactMessages       ContactMessage[]
  telegramVerifications TelegramVerification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models
model PointTransaction {
  id        String   @id @default(cuid())
  userId    String
  delta     Int
  reason    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model WheelSpin {
  id        String   @id @default(cuid())
  userId    String
  result    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model LotteryTicket {
  id        String   @id @default(cuid())
  userId    String
  drawId    String
  numbers   String   // JSON string of selected numbers
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([drawId])
  @@index([createdAt])
}

model Reward {
  id          String   @id @default(cuid())
  title       String
  description String?
  costPoints  Int
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([active])
  @@index([costPoints])
}

model ContactMessage {
  id        String             @id @default(cuid())
  userId    String?
  name      String
  email     String
  message   String             @db.Text
  status    ContactMessageStatus @default(NEW)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([createdAt])
}

model TelegramVerification {
  id         String    @id @default(cuid())
  userId     String
  telegramId String
  verifiedAt DateTime?
  token      String    @unique
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, telegramId])
  @@index([token])
}

enum ContactMessageStatus {
  NEW
  READ
  ARCHIVED
}